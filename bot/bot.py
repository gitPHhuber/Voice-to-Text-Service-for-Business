import os
import sys
import asyncio
import httpx
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv

load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
BACKEND_URL = "http://10.20.205.15:8001"

HELP_MESSAGE = """
–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ.

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∞—É–¥–∏–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

**–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏:**
–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å "—Å–∫–æ—Ä–æ—Å—Ç—å" –∏ "–∫–∞—á–µ—Å—Ç–≤–æ" —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è, —É–∫–∞–∑–∞–≤ –º–æ–¥–µ–ª—å –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–∞–π–ª—É.
–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:
- `tiny` (—Å–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è, –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
- `base`
- `small`
- `medium` (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —Ö–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å)
- `large` (—Å–∞–º–∞—è –º–µ–¥–ª–µ–Ω–Ω–∞—è, –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ)

**–ü—Ä–∏–º–µ—Ä:** –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏ –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ –Ω–µ–º—É –Ω–∞–ø–∏—à–∏—Ç–µ `large`.
"""

ALLOWED_MODELS = ['tiny', 'base', 'small', 'medium', 'large']

STATUS_MESSAGES = {
    "CONVERTING": "–®–∞–≥ 1/5: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é —Ñ–∞–π–ª...",
    "DIARIZING": "–®–∞–≥ 2/5: –†–∞–∑–¥–µ–ª—è—é —Ä–µ—á—å –ø–æ –¥–∏–∫—Ç–æ—Ä–∞–º...",
    "NO_SPEECH_FOUND": "‚úÖ –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ—á–∏.",
    "SLICING": "–®–∞–≥ 3/5: –ù–∞—Ä–µ–∑–∞—é –∞—É–¥–∏–æ...",
    "TRANSCRIBING": "–®–∞–≥ 4/5: –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...",
    "DOCUMENTING": "–®–∞–≥ 5/5: –°–æ–±–∏—Ä–∞—é –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç...",
}

if not TELEGRAM_BOT_TOKEN:
    print("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ.", file=sys.stderr)
    sys.exit(1)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(HELP_MESSAGE, parse_mode='Markdown')

async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file_to_download = update.message.document or update.message.video or update.message.audio or update.message.voice
    if not file_to_download: return
    
    model_choice = "medium"
    if update.message.caption:
        caption_text = update.message.caption.strip().lower()
        if caption_text in ALLOWED_MODELS:
            model_choice = caption_text
    
    status_message = await update.message.reply_text(f'üì• –§–∞–π–ª –ø—Ä–∏–Ω—è—Ç. –ú–æ–¥–µ–ª—å: `{model_choice}`. –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ —Å–µ—Ä–≤–∏—Å...')
    
    downloaded_file = await file_to_download.get_file()
    file_bytes = await downloaded_file.download_as_bytearray()
    
    try:
        async with httpx.AsyncClient(timeout=None) as client:
            files = {'file': (getattr(file_to_download, 'file_name', 'voice_message.ogg'), bytes(file_bytes), "application/octet-stream")}
            data = {'model': model_choice}
            
            response = await client.post(f"{BACKEND_URL}/transcribe", files=files, data=data)
            response.raise_for_status()
            
            data = response.json()
            job_id = data.get("job_id")
            task_id = data.get("task_id")

            if not job_id or not task_id:
                await status_message.edit_text("‚ùå Backend –Ω–µ –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ ID.")
                return

            last_status_text = ""
            for _ in range(360):
                await asyncio.sleep(5)
                status_response = await client.get(f"{BACKEND_URL}/status/{job_id}")
                status_data = status_response.json()
                
                current_status = status_data.get("status")
                current_info = status_data.get("info")
                
                new_status_text = f"‚è≥ –ó–∞–¥–∞—á–∞ –≤ –æ—á–µ—Ä–µ–¥–∏... ({current_status})"
                if current_status == "PROGRESS" and current_info and 'status' in current_info:
                    new_status_text = STATUS_MESSAGES.get(current_info['status'], "–û–±—Ä–∞–±–æ—Ç–∫–∞...")
                
                if new_status_text != last_status_text:
                    await status_message.edit_text(new_status_text)
                    last_status_text = new_status_text

                if current_status == "SUCCESS":
                    await status_message.edit_text("‚úÖ –ì–æ—Ç–æ–≤–æ! –°–∫–∞—á–∏–≤–∞—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
                    result_resp = await client.get(f"{BACKEND_URL}/result/{task_id}")
                    if result_resp.status_code == 200:
                        await update.message.reply_document(document=result_resp.content, filename=f"{task_id}.md")
                    else:
                        await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –°—Ç–∞—Ç—É—Å: {result_resp.status_code}")
                    return
                
                elif current_status == "FAILED":
                    await status_message.edit_text(f"‚ùå –ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ backend. ID: `{job_id}`")
                    return

            await status_message.edit_text("‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è. –ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∞—Å—å —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ.")

    except httpx.RequestError as e:
        await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ backend: {e}")
    except Exception as e:
        await status_message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

def main():
    print("–ë–æ—Ç-–∫–ª–∏–µ–Ω—Ç —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –∑–∞–ø—É—â–µ–Ω...")
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.AUDIO | filters.VIDEO | filters.Document.ALL | filters.VOICE, handle_file))
    application.run_polling()

if __name__ == '__main__':
    main()
